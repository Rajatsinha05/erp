export { BaseController } from './BaseController';
export { CompanyController } from './CompanyController';
export { UserController } from './UserController';
export { VisitorController } from './VisitorController';
export { CustomerController } from './CustomerController';
export { SupplierController } from './SupplierController';
export { InventoryController } from './InventoryController';
export { ProductionController } from './ProductionController';
export { CustomerOrderController } from './CustomerOrderController';
export { InvoiceController } from './InvoiceController';
export { PurchaseOrderController } from './PurchaseOrderController';
export { QuotationController } from './QuotationController';
export { RoleController } from './RoleController';
export { VehicleController } from './VehicleController';
export { WarehouseController } from './WarehouseController';
export { StockMovementController } from './StockMovementController';
export { FinancialTransactionController } from './FinancialTransactionController';
export { AuditLogController } from './AuditLogController';
export { SecurityLogController } from './SecurityLogController';
export { BusinessAnalyticsController } from './BusinessAnalyticsController';
export { BoilerMonitoringController } from './BoilerMonitoringController';
export { ElectricityMonitoringController } from './ElectricityMonitoringController';
export { HospitalityController } from './HospitalityController';
export { DispatchController } from './DispatchController';
export { ReportController } from './ReportController';
export { SpareController } from './SpareController';
import { CompanyController } from './CompanyController';
import { UserController } from './UserController';
import { VisitorController } from './VisitorController';
import { CustomerController } from './CustomerController';
import { SupplierController } from './SupplierController';
import { InventoryController } from './InventoryController';
import { ProductionController } from './ProductionController';
import { CustomerOrderController } from './CustomerOrderController';
import { InvoiceController } from './InvoiceController';
import { PurchaseOrderController } from './PurchaseOrderController';
import { QuotationController } from './QuotationController';
import { RoleController } from './RoleController';
import { VehicleController } from './VehicleController';
import { WarehouseController } from './WarehouseController';
import { StockMovementController } from './StockMovementController';
import { FinancialTransactionController } from './FinancialTransactionController';
import { AuditLogController } from './AuditLogController';
import { SecurityLogController } from './SecurityLogController';
import { BusinessAnalyticsController } from './BusinessAnalyticsController';
import { BoilerMonitoringController } from './BoilerMonitoringController';
import { ElectricityMonitoringController } from './ElectricityMonitoringController';
import { HospitalityController } from './HospitalityController';
import { DispatchController } from './DispatchController';
import { ReportController } from './ReportController';
export declare class ControllerFactory {
    private static instances;
    static getController<T>(ControllerClass: new () => T): T;
    static getCompanyController(): CompanyController;
    static getUserController(): UserController;
    static getVisitorController(): VisitorController;
    static getCustomerController(): CustomerController;
    static getSupplierController(): SupplierController;
    static getInventoryController(): InventoryController;
    static getProductionController(): ProductionController;
    static getCustomerOrderController(): CustomerOrderController;
    static getInvoiceController(): InvoiceController;
    static getPurchaseOrderController(): PurchaseOrderController;
    static getQuotationController(): QuotationController;
    static getRoleController(): RoleController;
    static getVehicleController(): VehicleController;
    static getWarehouseController(): WarehouseController;
    static getStockMovementController(): StockMovementController;
    static getFinancialTransactionController(): FinancialTransactionController;
    static getAuditLogController(): AuditLogController;
    static getSecurityLogController(): SecurityLogController;
    static getBusinessAnalyticsController(): BusinessAnalyticsController;
    static getBoilerMonitoringController(): BoilerMonitoringController;
    static getElectricityMonitoringController(): ElectricityMonitoringController;
    static getHospitalityController(): HospitalityController;
    static getDispatchController(): DispatchController;
    static getReportController(): ReportController;
    static clearInstances(): void;
}
declare const _default: {
    CompanyController: typeof CompanyController;
    UserController: typeof UserController;
    VisitorController: typeof VisitorController;
    CustomerController: typeof CustomerController;
    SupplierController: typeof SupplierController;
    InventoryController: typeof InventoryController;
    ProductionController: typeof ProductionController;
    CustomerOrderController: typeof CustomerOrderController;
    InvoiceController: typeof InvoiceController;
    PurchaseOrderController: typeof PurchaseOrderController;
    QuotationController: typeof QuotationController;
    RoleController: typeof RoleController;
    VehicleController: typeof VehicleController;
    WarehouseController: typeof WarehouseController;
    StockMovementController: typeof StockMovementController;
    FinancialTransactionController: typeof FinancialTransactionController;
    AuditLogController: typeof AuditLogController;
    SecurityLogController: typeof SecurityLogController;
    BusinessAnalyticsController: typeof BusinessAnalyticsController;
    BoilerMonitoringController: typeof BoilerMonitoringController;
    ElectricityMonitoringController: typeof ElectricityMonitoringController;
    HospitalityController: typeof HospitalityController;
    DispatchController: typeof DispatchController;
    ReportController: typeof ReportController;
    ControllerFactory: typeof ControllerFactory;
};
export default _default;
//# sourceMappingURL=index.d.ts.map